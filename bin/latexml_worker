#!/usr/bin/perl -w
#################################
# A ZeroMQ worker for CorTeX    #
#  TeX-to-HTML5 conversions     #
#  via LaTeXML                  #
#################################

# Created and provided by Deyan Ginev
#   released in the Public Domain

use ZMQ::LibZMQ3;
use ZMQ::Constants qw(ZMQ_DEALER ZMQ_PUSH ZMQ_SNDMORE ZMQ_RCVMORE);
use File::Temp qw(tempfile);

# Set up basic parameters for this service
my $service_name = "tex_to_html";
my $message_size = 100000;
my $work_counter = 0;

# Set up the cortex endpoints
my $cortex_ip = shift || '212.201.49.37';
my $cortex_ventilator_port = shift || '5555';
my $cortex_sink_port = shift || '5556';

# Connect to a task ventilator
my $ventilator_context = zmq_init;
my $ventilator = zmq_socket( $ventilator_context, ZMQ_DEALER );
zmq_bind($ventilator, "tcp://$cortex_ip:$cortex_ventilator_port");

# Connect to a task sink
my $sink_context = zmq_init;
my $sink = zmq_socket( $sink_context, ZMQ_PUSH );
zmq_connect($sink, "tcp://$cortex_ip:$cortex_sink_port");

# Work in perpetuity
my $taskid_msg = zmq_msg_init();
my $recv_msg = zmq_msg_init();
while (1) {
  # First, request a task from the ventilator  
  zmq_sendmsg( $ventilator, $service_name );
  my $rv = zmq_msg_recv($taskid_msg, $ventilator, 0);
  my $taskid = zmq_msg_data(taskid_msg);
  
  # Prepare a File for the input
  my ($file, $input_filepath) = tempfile($taskid, SUFFIX => ".zip");
  binmode($file);
  while (zmq_msg_recv($recv_msg, $ventilator, ZMQ_RCVMORE) > 0) {
    print $file zmg_msg_data($recv_msg);
  }
  close $file;

  my $is_converted = convert($input_filepath);
  if ($is_converted) {
    my $converted_file = $is_converted;
    zmq_sendmsg( $sink, $service_name, ZMQ_SNDMORE);
    zmq_sendmsg( $sink, $taskid, ZMQ_SNDMORE);
    open(my $converted_fh, "<", $converted_file);
    binmode($converted_fh);

    # Stream converted data via zmq
    #  Read file in $message_size blocks
    my $data_buffer = '';
    while (my $size = read($converted_fh, $data_buffer, $message_size)) {
      if ($size < $message_size) {
        # Last message
        zmq_send($sink, $data_buffer, $size, 0);
      } else {
        # Message part, more will follow
        zmq_send($sink,$data_buffer,$size,SNDMORE);
      }
    }
    close $converted_fh;
  }
  else {
    # If there was nothing to do, retry a minute later
    sleep 60;
    continue 
  }

  $work_counter++;
  print STDERR "-- Job $work_counter completed.\n";
}

1;